// Generated by BUCKLESCRIPT VERSION 1.6.0, PLEASE EDIT WITH CARE
'use strict';

var List       = require("bs-platform/lib/js/list");
var $$Array    = require("bs-platform/lib/js/array");
var Curry      = require("bs-platform/lib/js/curry");
var React      = require("react");
var $$String   = require("bs-platform/lib/js/string");
var ReactRe    = require("reason-react/lib/js/src/reactRe");
var Caml_obj   = require("bs-platform/lib/js/caml_obj");
var TodoItem   = require("./todoItem");
var Director   = require("director");
var Js_boolean = require("bs-platform/lib/js/js_boolean");
var Pervasives = require("bs-platform/lib/js/pervasives");
var ReactDOMRe = require("reason-react/lib/js/src/reactDOMRe");
var TodoFooter = require("./todoFooter");

var namespace = "reason-react-todos";

function saveLocally(todos) {
  var match = JSON.stringify(todos);
  if (match !== undefined) {
    localStorage.setItem(namespace, match);
    return /* () */0;
  } else {
    return /* () */0;
  }
}

var include = ReactRe.Component[/* Stateful */8];

var componentWillUpdate = include[1];

var componentDidUpdate = include[2];

var componentWillReceiveProps = include[3];

var componentWillUnmount = include[4];

var getInstanceVars = include[5];

var jsPropsToReasonProps = include[6];

var name = "TodoAppRe";

function getInitialState() {
  var match = localStorage.getItem(namespace);
  var todos = match !== null ? JSON.parse(match) : /* [] */0;
  return /* record */[
          /* nowShowing : AllTodos */0,
          /* editing : None */0,
          /* newTodo */"",
          /* todos */todos
        ];
}

function componentDidMount(param) {
  var updater = param[/* updater */2];
  var f1 = function (param, _) {
    var state = param[/* state */0];
    return /* Some */[/* record */[
              /* nowShowing : AllTodos */0,
              /* editing */state[/* editing */1],
              /* newTodo */state[/* newTodo */2],
              /* todos */state[/* todos */3]
            ]];
  };
  var f2 = function (param, _) {
    var state = param[/* state */0];
    return /* Some */[/* record */[
              /* nowShowing : ActiveTodos */1,
              /* editing */state[/* editing */1],
              /* newTodo */state[/* newTodo */2],
              /* todos */state[/* todos */3]
            ]];
  };
  var f3 = function (param, _) {
    var state = param[/* state */0];
    return /* Some */[/* record */[
              /* nowShowing : CompletedTodos */2,
              /* editing */state[/* editing */1],
              /* newTodo */state[/* newTodo */2],
              /* todos */state[/* todos */3]
            ]];
  };
  var router = new Director.Router({
        "/": Curry._1(updater, f1),
        "/active": Curry._1(updater, f2),
        "/completed": Curry._1(updater, f3)
      });
  router.init("/");
  return /* None */0;
}

function handleChange(param, $$event) {
  var state = param[/* state */0];
  return /* Some */[/* record */[
            /* nowShowing */state[/* nowShowing */0],
            /* editing */state[/* editing */1],
            /* newTodo */$$event.target.value,
            /* todos */state[/* todos */3]
          ]];
}

function handleNewTodoKeyDown(param, $$event) {
  if ($$event.keyCode === 13) {
    var state = param[/* state */0];
    $$event.preventDefault();
    var nonEmptyValue = $$String.trim(state[/* newTodo */2]);
    if (nonEmptyValue === "") {
      return /* None */0;
    } else {
      var todos = Pervasives.$at(state[/* todos */3], /* :: */[
            /* record */[
              /* id */Pervasives.string_of_float(Date.now()),
              /* title */nonEmptyValue,
              /* completed : false */0
            ],
            /* [] */0
          ]);
      saveLocally(todos);
      return /* Some */[/* record */[
                /* nowShowing */state[/* nowShowing */0],
                /* editing */state[/* editing */1],
                /* newTodo */"",
                /* todos */todos
              ]];
    }
  } else {
    return /* None */0;
  }
}

function toggleAll(param, $$event) {
  var state = param[/* state */0];
  var checked = $$event.target.checked;
  var todos = List.map(function (todo) {
        return /* record */[
                /* id */todo[/* id */0],
                /* title */todo[/* title */1],
                /* completed */+checked
              ];
      }, state[/* todos */3]);
  saveLocally(todos);
  return /* Some */[/* record */[
            /* nowShowing */state[/* nowShowing */0],
            /* editing */state[/* editing */1],
            /* newTodo */state[/* newTodo */2],
            /* todos */todos
          ]];
}

function toggle(todoToToggle, param, _) {
  var state = param[/* state */0];
  var todos = List.map(function (todo) {
        var match = Caml_obj.caml_equal(todo, todoToToggle);
        if (match !== 0) {
          return /* record */[
                  /* id */todo[/* id */0],
                  /* title */todo[/* title */1],
                  /* completed */1 - todo[/* completed */2]
                ];
        } else {
          return todo;
        }
      }, state[/* todos */3]);
  saveLocally(todos);
  return /* Some */[/* record */[
            /* nowShowing */state[/* nowShowing */0],
            /* editing */state[/* editing */1],
            /* newTodo */state[/* newTodo */2],
            /* todos */todos
          ]];
}

function destroy(todo, param, _) {
  var state = param[/* state */0];
  var todos = List.filter(function (candidate) {
          return +(candidate !== todo);
        })(state[/* todos */3]);
  saveLocally(todos);
  return /* Some */[/* record */[
            /* nowShowing */state[/* nowShowing */0],
            /* editing */state[/* editing */1],
            /* newTodo */state[/* newTodo */2],
            /* todos */todos
          ]];
}

function edit(todo, param, _) {
  var state = param[/* state */0];
  return /* Some */[/* record */[
            /* nowShowing */state[/* nowShowing */0],
            /* editing : Some */[todo[/* id */0]],
            /* newTodo */state[/* newTodo */2],
            /* todos */state[/* todos */3]
          ]];
}

function save(todoToSave, param, text) {
  var state = param[/* state */0];
  var todos = List.map(function (todo) {
        var match = Caml_obj.caml_equal(todo, todoToSave);
        if (match !== 0) {
          return /* record */[
                  /* id */todo[/* id */0],
                  /* title */text,
                  /* completed */todo[/* completed */2]
                ];
        } else {
          return todo;
        }
      }, state[/* todos */3]);
  saveLocally(todos);
  return /* Some */[/* record */[
            /* nowShowing */state[/* nowShowing */0],
            /* editing : None */0,
            /* newTodo */state[/* newTodo */2],
            /* todos */todos
          ]];
}

function cancel(param, _) {
  var state = param[/* state */0];
  return /* Some */[/* record */[
            /* nowShowing */state[/* nowShowing */0],
            /* editing : None */0,
            /* newTodo */state[/* newTodo */2],
            /* todos */state[/* todos */3]
          ]];
}

function clearCompleted(param, _) {
  var state = param[/* state */0];
  var todos = List.filter(function (todo) {
          return 1 - todo[/* completed */2];
        })(state[/* todos */3]);
  saveLocally(todos);
  return /* Some */[/* record */[
            /* nowShowing */state[/* nowShowing */0],
            /* editing */state[/* editing */1],
            /* newTodo */state[/* newTodo */2],
            /* todos */todos
          ]];
}

function render(param) {
  var state = param[/* state */0];
  var todos = state[/* todos */3];
  var editing = state[/* editing */1];
  var updater = param[/* updater */2];
  var todoItems = List.map(function (todo) {
        var editing$1 = editing ? +(editing[0] === todo[/* id */0]) : /* false */0;
        return Curry._4(TodoItem.createElement(todo, editing$1, Curry._1(updater, function (param, param$1) {
                            return destroy(todo, param, param$1);
                          }), Curry._1(updater, function (param, param$1) {
                            return save(todo, param, param$1);
                          }), Curry._1(updater, function (param, param$1) {
                            return edit(todo, param, param$1);
                          }), Curry._1(updater, function (param, param$1) {
                            return toggle(todo, param, param$1);
                          }), Curry._1(updater, cancel)), /* [] */0, /* None */0, /* Some */[todo[/* id */0]], /* () */0);
      }, List.filter(function (todo) {
              var match = state[/* nowShowing */0];
              switch (match) {
                case 0 : 
                    return /* true */1;
                case 1 : 
                    return 1 - todo[/* completed */2];
                case 2 : 
                    return todo[/* completed */2];
                
              }
            })(todos));
  var todosLength = List.length(todos);
  var completedCount = List.length(List.filter(function (todo) {
              return todo[/* completed */2];
            })(todos));
  var activeTodoCount = todosLength - completedCount | 0;
  var footer;
  var exit = 0;
  if (activeTodoCount !== 0 || completedCount !== 0) {
    exit = 1;
  } else {
    footer = null;
  }
  if (exit === 1) {
    footer = Curry._4(TodoFooter.createElement(activeTodoCount, completedCount, state[/* nowShowing */0], Curry._1(updater, clearCompleted)), /* [] */0, /* None */0, /* None */0, /* () */0);
  }
  var match = +(todosLength === 0);
  var main = match !== 0 ? null : React.createElement("section", {
          className: "main"
        }, React.createElement("input", {
              className: "toggle-all",
              checked: Js_boolean.to_js_boolean(+(activeTodoCount === 0)),
              type: "checkbox",
              onChange: Curry._1(updater, toggleAll)
            }), React.createElement("ul", {
              className: "todo-list"
            }, $$Array.of_list(todoItems)));
  return React.createElement("div", undefined, React.createElement("header", {
                  className: "header"
                }, React.createElement("h1", undefined, "todos"), React.createElement("input", {
                      className: "new-todo",
                      autoFocus: true,
                      placeholder: "What needs to be done?",
                      value: state[/* newTodo */2],
                      onKeyDown: Curry._1(updater, handleNewTodoKeyDown),
                      onChange: Curry._1(updater, handleChange)
                    })), main, footer);
}

var TodoApp_006 = /* JsProps */include[7];

var TodoApp_007 = /* InstanceVars */include[8];

var TodoApp = /* module */[
  /* componentWillUpdate */componentWillUpdate,
  /* componentDidUpdate */componentDidUpdate,
  /* componentWillReceiveProps */componentWillReceiveProps,
  /* componentWillUnmount */componentWillUnmount,
  /* getInstanceVars */getInstanceVars,
  /* jsPropsToReasonProps */jsPropsToReasonProps,
  TodoApp_006,
  TodoApp_007,
  /* name */name,
  /* getInitialState */getInitialState,
  /* componentDidMount */componentDidMount,
  /* handleChange */handleChange,
  /* handleNewTodoKeyDown */handleNewTodoKeyDown,
  /* toggleAll */toggleAll,
  /* toggle */toggle,
  /* destroy */destroy,
  /* edit */edit,
  /* save */save,
  /* cancel */cancel,
  /* clearCompleted */clearCompleted,
  /* render */render
];

var include$1 = ReactRe.CreateComponent([
      name,
      getInstanceVars,
      getInitialState,
      componentDidMount,
      componentWillReceiveProps,
      componentWillUpdate,
      componentDidUpdate,
      componentWillUnmount,
      jsPropsToReasonProps,
      render
    ]);

var wrapProps = include$1[1];

var createElement = Curry._1(wrapProps, /* () */0);

var Top_001 = /* comp */include$1[0];

var Top = /* module */[
  /* TodoApp */TodoApp,
  Top_001,
  /* wrapProps */wrapProps,
  /* createElement */createElement
];

ReactDOMRe.renderToElementWithClassName(Curry._4(createElement, /* [] */0, /* None */0, /* None */0, /* () */0), "todoapp");

exports.namespace   = namespace;
exports.saveLocally = saveLocally;
exports.Top         = Top;
/* include Not a pure module */
