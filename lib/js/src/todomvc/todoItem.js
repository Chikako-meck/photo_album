// Generated by BUCKLESCRIPT VERSION 1.6.0, PLEASE EDIT WITH CARE
'use strict';

var Curry      = require("bs-platform/lib/js/curry");
var React      = require("react");
var $$String   = require("bs-platform/lib/js/string");
var ReactRe    = require("reason-react/lib/js/src/reactRe");
var Js_boolean = require("bs-platform/lib/js/js_boolean");

var include = ReactRe.Component[/* Stateful */8][/* InstanceVars */8];

var componentDidMount = include[0];

var componentWillUpdate = include[1];

var componentWillReceiveProps = include[3];

var componentWillUnmount = include[4];

var jsPropsToReasonProps = include[5];

var name = "TodoItemRe";

function getInstanceVars() {
  return /* record */[/* editFieldRef : None */0];
}

function getInitialState(props) {
  return /* record */[/* editText */props[/* todo */0][/* title */1]];
}

function handleSubmit(param, _) {
  var props = param[/* props */1];
  var nonEmptyValue = $$String.trim(param[/* state */0][/* editText */0]);
  if (nonEmptyValue === "") {
    Curry._1(props[/* onDestroy */2], /* () */0);
    return /* None */0;
  } else {
    Curry._1(props[/* onSave */3], nonEmptyValue);
    return /* Some */[/* record */[/* editText */nonEmptyValue]];
  }
}

function handleEdit(param, _) {
  var props = param[/* props */1];
  Curry._1(props[/* onEdit */4], /* () */0);
  return /* Some */[/* record */[/* editText */props[/* todo */0][/* title */1]]];
}

function handleKeyDown(componentBag, $$event) {
  var props = componentBag[/* props */1];
  if ($$event.which === 27) {
    Curry._1(props[/* onCancel */6], /* () */0);
    return /* Some */[/* record */[/* editText */props[/* todo */0][/* title */1]]];
  } else if ($$event.which === 13) {
    return handleSubmit(componentBag, /* () */0);
  } else {
    return /* None */0;
  }
}

function handleChange(param, $$event) {
  var match = param[/* props */1][/* editing */1];
  if (match !== 0) {
    return /* Some */[/* record */[/* editText */$$event.target.value]];
  } else {
    return /* None */0;
  }
}

function setEditFieldRef(param, r) {
  param[/* instanceVars */4][/* editFieldRef */0] = /* Some */[r];
  return /* () */0;
}

function componentDidUpdate(prevProps, _, param) {
  var match = prevProps[/* editing */1];
  var match$1 = param[/* props */1][/* editing */1];
  var match$2 = param[/* instanceVars */4][/* editFieldRef */0];
  if (match !== 0) {
    return /* None */0;
  } else if (match$1 !== 0) {
    if (match$2) {
      var field = match$2[0];
      field.focus();
      field.setSelectionRange(field.value.length, field.value.length);
      return /* None */0;
    } else {
      return /* None */0;
    }
  } else {
    return /* None */0;
  }
}

function render(param) {
  var props = param[/* props */1];
  var onToggle = props[/* onToggle */5];
  var onDestroy = props[/* onDestroy */2];
  var todo = props[/* todo */0];
  var updater = param[/* updater */2];
  var match = todo[/* completed */2];
  var className = $$String.concat(" ", /* :: */[
        match !== 0 ? "completed" : "",
        /* :: */[
          props[/* editing */1] !== 0 ? "editing" : "",
          /* [] */0
        ]
      ]);
  return React.createElement("li", {
              className: className
            }, React.createElement("div", {
                  className: "view"
                }, React.createElement("input", {
                      className: "toggle",
                      checked: Js_boolean.to_js_boolean(todo[/* completed */2]),
                      type: "checkbox",
                      onChange: function () {
                        return Curry._1(onToggle, /* () */0);
                      }
                    }), React.createElement("label", {
                      onDoubleClick: Curry._1(updater, handleEdit)
                    }, todo[/* title */1]), React.createElement("button", {
                      className: "destroy",
                      onClick: function () {
                        return Curry._1(onDestroy, /* () */0);
                      }
                    })), React.createElement("input", {
                  ref: Curry._1(param[/* handler */3], setEditFieldRef),
                  className: "edit",
                  value: param[/* state */0][/* editText */0],
                  onKeyDown: Curry._1(updater, handleKeyDown),
                  onBlur: Curry._1(updater, handleSubmit),
                  onChange: Curry._1(updater, handleChange)
                }));
}

var TodoItem_005 = /* JsProps */include[6];

var TodoItem = /* module */[
  /* componentDidMount */componentDidMount,
  /* componentWillUpdate */componentWillUpdate,
  /* componentWillReceiveProps */componentWillReceiveProps,
  /* componentWillUnmount */componentWillUnmount,
  /* jsPropsToReasonProps */jsPropsToReasonProps,
  TodoItem_005,
  /* name */name,
  /* getInstanceVars */getInstanceVars,
  /* getInitialState */getInitialState,
  /* handleSubmit */handleSubmit,
  /* handleEdit */handleEdit,
  /* handleKeyDown */handleKeyDown,
  /* handleChange */handleChange,
  /* setEditFieldRef */setEditFieldRef,
  /* componentDidUpdate */componentDidUpdate,
  /* render */render
];

var include$1 = ReactRe.CreateComponent([
      name,
      getInstanceVars,
      getInitialState,
      componentDidMount,
      componentWillReceiveProps,
      componentWillUpdate,
      componentDidUpdate,
      componentWillUnmount,
      jsPropsToReasonProps,
      render
    ]);

var wrapProps = include$1[1];

function createElement(todo, editing, onDestroy, onSave, onEdit, onToggle, onCancel) {
  return Curry._1(wrapProps, /* record */[
              /* todo */todo,
              /* editing */editing,
              /* onDestroy */onDestroy,
              /* onSave */onSave,
              /* onEdit */onEdit,
              /* onToggle */onToggle,
              /* onCancel */onCancel
            ]);
}

var escapeKey = 27;

var enterKey = 13;

var comp = include$1[0];

exports.escapeKey     = escapeKey;
exports.enterKey      = enterKey;
exports.TodoItem      = TodoItem;
exports.comp          = comp;
exports.wrapProps     = wrapProps;
exports.createElement = createElement;
/* include Not a pure module */
