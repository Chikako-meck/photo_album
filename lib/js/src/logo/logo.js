// Generated by BUCKLESCRIPT VERSION 1.7.3, PLEASE EDIT WITH CARE
'use strict';

var Curry      = require("bs-platform/lib/js/curry.js");
var React      = require("react");
var ReactRe    = require("reason-react/lib/js/src/reactRe.js");
var Constants  = require("./constants.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

var include = ReactRe.Component[/* Stateful */8];

var componentWillUpdate = include[1];

var componentDidUpdate = include[2];

var componentWillReceiveProps = include[3];

var componentWillUnmount = include[4];

var getInstanceVars = include[5];

var jsPropsToReasonProps = include[6];

function getInitialState() {
  return /* float array */[
          0.0,
          0.1,
          Constants.mouseUpDrag,
          Date.now()
        ];
}

function componentDidMount(param) {
  var setState = param[/* setState */5];
  var onAnimationFrame = function () {
    var stateSetter = function (param) {
      var state = param[/* state */0];
      var now = Date.now();
      var idealFramesSinceLast = 1 + (now - state[/* lastMs */3]) / 16;
      var nextDegrees = state[/* degrees */0] + (Constants.baseVel + state[/* velocity */1]) * idealFramesSinceLast;
      var nextVelocity = state[/* velocity */1] * state[/* drag */2];
      return /* float array */[
              nextDegrees,
              nextVelocity,
              state[/* drag */2],
              now
            ];
    };
    Curry._1(setState, stateSetter);
    requestAnimationFrame(onAnimationFrame);
    return /* () */0;
  };
  requestAnimationFrame(onAnimationFrame);
  return /* None */0;
}

var name = "Logo";

function renderGraphic(rotationStyle) {
  return React.createElement("g", {
              fill: "none",
              stroke: "none"
            }, React.createElement("g", {
                  transform: "scale(1.5, 1.5) translate(100.000000, 105.000000)"
                }, React.createElement("path", {
                      d: Constants.border_path,
                      fill: "rgba(0,0,0,0.1)"
                    }), React.createElement("path", {
                      d: Constants.bg_path,
                      fill: "#dd4b39"
                    }), React.createElement("g", {
                      transform: "translate(55, 29)"
                    }, React.createElement("g", {
                          style: rotationStyle
                        }, React.createElement("path", {
                              d: Constants.center_dot_path,
                              fill: "#FFFFFF"
                            }), React.createElement("g", {
                              stroke: "#FFFFFF",
                              strokeWidth: "8"
                            }, React.createElement("path", {
                                  d: Constants.ring_one_path
                                }), React.createElement("path", {
                                  d: Constants.ring_two_path,
                                  transform: Constants.ring_two_rotate
                                }), React.createElement("path", {
                                  d: Constants.ring_three_path,
                                  transform: Constants.ring_three_rotate
                                }))))));
}

function handleMouseUp(param, _) {
  var state = param[/* state */0];
  var withAccel = state[/* velocity */1] + Constants.clickAccel;
  var match = +(withAccel < Constants.maxVel);
  var nextVelocity = match !== 0 ? withAccel : Constants.maxVel;
  return /* Some */[/* float array */[
            state[/* degrees */0],
            nextVelocity,
            Constants.mouseUpDrag,
            state[/* lastMs */3]
          ]];
}

function handleMouseDown(param, _) {
  var state = param[/* state */0];
  return /* Some */[/* float array */[
            state[/* degrees */0],
            state[/* velocity */1],
            Constants.mouseDownDrag,
            state[/* lastMs */3]
          ]];
}

function render(param) {
  var updater = param[/* updater */2];
  var transform = "rotate(" + (Pervasives.string_of_float(param[/* state */0][/* degrees */0]) + "deg)");
  var rotationStyle = {
    transform: transform,
    transformOrigin: "50% 50%"
  };
  return React.createElement("div", {
              style: {
                color: "#444444",
                fontFamily: "Montserrat",
                fontSize: "68px",
                paddingTop: "40px",
                textAlign: "center",
                userSelect: "none"
              }
            }, param[/* props */1][/* message */0], React.createElement("svg", {
                  style: {
                    cursor: "pointer"
                  },
                  height: "100%",
                  width: "100%",
                  onMouseDown: Curry._1(updater, handleMouseDown),
                  onMouseUp: Curry._1(updater, handleMouseUp),
                  version: "1.1",
                  viewBox: "0 0 700 700"
                }, renderGraphic(rotationStyle)));
}

var Logo_006 = /* JsProps */include[7];

var Logo_007 = /* InstanceVars */include[8];

var Logo = /* module */[
  /* componentWillUpdate */componentWillUpdate,
  /* componentDidUpdate */componentDidUpdate,
  /* componentWillReceiveProps */componentWillReceiveProps,
  /* componentWillUnmount */componentWillUnmount,
  /* getInstanceVars */getInstanceVars,
  /* jsPropsToReasonProps */jsPropsToReasonProps,
  Logo_006,
  Logo_007,
  /* getInitialState */getInitialState,
  /* componentDidMount */componentDidMount,
  /* name */name,
  /* renderGraphic */renderGraphic,
  /* handleMouseUp */handleMouseUp,
  /* handleMouseDown */handleMouseDown,
  /* render */render
];

var include$1 = ReactRe.CreateComponent([
      name,
      getInstanceVars,
      getInitialState,
      componentDidMount,
      componentWillReceiveProps,
      componentWillUpdate,
      componentDidUpdate,
      componentWillUnmount,
      jsPropsToReasonProps,
      render
    ]);

var wrapProps = include$1[1];

function createElement(message) {
  return Curry._1(wrapProps, /* record */[/* message */message]);
}

var comp = include$1[0];

exports.Logo          = Logo;
exports.comp          = comp;
exports.wrapProps     = wrapProps;
exports.createElement = createElement;
/* include Not a pure module */
